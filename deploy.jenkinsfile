pipeline {
  agent any
  stages {
    stage('Definir Versão') {
      steps {
        script {
          def ultimaVersao
          def tags

          tags = sh(script: 'git tag', returnStdout: true)

          if (tags.size() > 0) {
            ultimaVersao = sh(script: 'git describe --abbrev=0', returnStdout: true).replace('v', '').trim()
          } else {
            ultimaVersao = '0.0.0'
          }

          def versao = input(
            message: 'Informe', parameters: [
              [$class: 'TextParameterDefinition', defaultValue: "${ultimaVersao}", description: 'Qual será a nova versão?', name: 'versao']
            ]
          )

          echo versao

          env.MD068_VERSION = "${versao}"
        }
      }
    }

    stage('Instalação de dependências') {
      steps {
        sh 'yarn install'
      }
    }
    stage('Verificação de estilo de código') {
      steps {
        sh 'yarn lint'
      }
    }
    stage('Criação da tag') {
      steps {
        sshagent(['jenkins-generated-ssh-key']) {
          sh "git tag -a v${env.MD068_VERSION} -m 'Versao ${env.MD068_VERSION}'"
          sh "git push --tags"
        }
      }
    }
    stage('Atualizar branch main') {
      steps {
        sshagent(['jenkins-generated-ssh-key']) {
          sh "git checkout main"
          sh "git pull origin main"
          sh "git merge tags/v${env.MD068_VERSION} --strategy-option theirs"
          sh "git push origin main"
        }
      }
    }

  }
  environment {
    OFFICE365_HOOK = 'https://outlook.office.com/webhook/3f0a9f3d-9f74-4b9e-8c12-b14a35931790@5d71a713-dbcd-4672-81f3-79dbc0a6c5c6/JenkinsCI/99cbe4054ec8499199d2ad2047e559f4/1d7b7e65-802d-4e2c-89b2-8a3d2257790a'
  }
  post {
    cleanup {
      deleteDir()

      dir("${env.WORKSPACE}@tmp") {
        deleteDir()
      }
    }
  }
}
